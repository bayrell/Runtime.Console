/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Console;

use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.Console.BaseCommand;
use Runtime.Console.Annotations.ConsoleCommand;


class CommandsList extends BaseProvider
{
    Dict<string> commands_list = {};
    
    /**
	 * Start provider
	 */
	async void start()
	{
        Map commands_list = new Map();
		
		Collection<ConsoleCommand> commands = @.getEntities(classof ConsoleCommand);
		for (int i=0; i<commands.count(); i++)
		{
			ConsoleCommand info = commands[i];
			string command_class_name = info.name;
			if (command_class_name)
			{
				/* Get method getRoutes */
				fn getName = rtl::method(command_class_name, "getName");
				
				/* Returns command name */
				string name = getName();
				
				/* Add to list */
				commands_list.set(name, command_class_name);
			}
		}
		
		this.commands_list = commands_list.toDict();
    }
    
	
	/**
	 * Returns command by name
	 */
	string getCommandByName(string name) => this.commands_list.get(name);
	
	
	/**
	 * Returns commands list
	 */
	Collection<string> getCommands() => this.commands_list.keys().sort();
}